---
- name: Test API | Get admin key
  command: "cat /etc/kubernetes/admin.conf"
  register: admin_kubeconfig
  ignore_errors: true
  changed_when: false

# apiserver_sans came from kubespray
- name: kubeadm | aggregate all SANs
  set_fact:
    apiserver_sans: "{{ (sans_base + groups['masters'] + sans_lb + sans_lb_ip + sans_private_ip + sans_hostname) | unique }}"
  vars:
    sans_base:
      - "kubernetes"
      - "kubernetes.default"
      - "kubernetes.default.svc"
      - "kubernetes.default.svc.{{ cluster_name }}"
      - "localhost"
      - "127.0.0.1"
      - "{{ cluster_name }}"
    sans_lb: "{{ [api_loadbalancer_domain_name] if apiserver_loadbalancer_domain_name is defined else [] }}"
    sans_lb_ip: "{{ [api_loadbalancer_ip] if api_loadbalancer_ip is defined else [] }}"
    sans_private_ip: "{{ groups['masters'] | map('extract', hostvars, 'private_ip') | list | select('defined') | list }}"
    sans_hostname: "{{ groups['masters'] | map('extract', hostvars, ['ansible_hostname']) | list | select('defined') | list }}"
  tags:
    - facts

- name: kubeadm | Generate kubeadm init config
  template: 
    src: kubeadm-init.yml.j2
    dest: "{{ kube_config_dir }}/kubeadm-init.conf"
  when: admin_kubeconfig.rc != 0

- name: kubeadm | Init first master
  command: >-
    kubeadm init
    --config {{ kube_config_dir }}/kubeadm-init.conf
    --upload-certs
    --patches {{ kube_config_dir }}/patches
  register: kubeadm_init
  when: admin_kubeconfig.rc != 0

- name: kubeadm | set kubeadm certificate key
  set_fact:
    kubeadm_certificate_key: "{{ item | regex_search('--certificate-key ([^ ]+)','\\1') | first }}"
  with_items: "{{ hostvars[groups['masters'][0]]['kubeadm_init'].stdout_lines | default([]) }}"
  when:
    - kubeadm_certificate_key is not defined
    - (item | trim) is match('.*--certificate-key.*')


